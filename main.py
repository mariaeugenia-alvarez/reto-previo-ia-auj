import json

import os
from dotenv import load_dotenv


def llm_call(prompt_text):
    """
    Funci√≥n ficticia para interactuar con un modelo de lenguaje.
    En la pr√°ctica, esto har√≠a una llamada real a una API.
    """
    # En un proyecto real, el c√≥digo para llamar a la API se ver√≠a as√≠:
    # from openai import OpenAI
    # client = OpenAI(api_key="TU_CLAVE_AQUI")
    # response = client.chat.completions.create(
    #   model="gpt-3.5-turbo",
    #   messages=[{"role": "user", "content": prompt_text}]
    # )
    # return response.choices[0].message.content

    # Para este ejemplo de proyecto junior, simplemente devolvemos un JSON de prueba
    # para demostrar que el prompt funciona.
    return json.dumps(
        [
            {
                "titulo": "Arrival",
                "genero": "Ciencia ficci√≥n, drama",
                "motivo_recomendacion": "Al igual que las pel√≠culas de Christopher Nolan que te gustan, 'Arrival' te ofrecer√° una trama de ciencia ficci√≥n compleja que se desarrolla de manera no lineal. Se centra en el poder del lenguaje y el tiempo, elementos que te har√°n pensar y que tienen un final sorprendente, en l√≠nea con tu gusto por los giros argumentales.",
            },
            {
                "titulo": "Primer",
                "genero": "Ciencia ficci√≥n, thriller",
                "motivo_recomendacion": "Esta pel√≠cula de bajo presupuesto es una de las m√°s complejas sobre viajes en el tiempo. Si te gusta que una pel√≠cula te 'vuele la cabeza' y no temes a una trama que requiere atenci√≥n, 'Primer' te retar√° y te har√° reflexionar sobre cada detalle, de forma similar a los desaf√≠os narrativos de 'Inception'.",
            },
            {
                "titulo": "Memento",
                "genero": "Thriller psicol√≥gico",
                "motivo_recomendacion": "Dirigida por Christopher Nolan, es una elecci√≥n obvia. La narrativa se construye en reversa, lo que encaja perfectamente con tu gusto por los 'giros de trama sorprendentes' y las historias no lineales. Explora temas de memoria y percepci√≥n de una forma que te fascinar√°.",
            },
        ],
        indent=2,
    )


def recomendar_peliculas_personalizadas():
    """
    Funci√≥n principal para guiar al usuario y obtener recomendaciones.
    """
    print(
        "üé¨ ¬°Hola! Soy tu asistente de cine. Para darte las mejores recomendaciones, necesito conocer tus gustos."
    )
    print("-" * 50)

    # 1. Recolecci√≥n de datos del usuario
    generos = input(
        "1. ¬øQu√© g√©neros de pel√≠culas te gustan y cu√°les evitas? (ej: Me gusta la ciencia ficci√≥n, pero no el terror)\n> "
    )
    peliculas_favoritas = input(
        "2. Menciona 2-3 de tus pel√≠culas, directores o actores favoritos. (ej: Inception, Christopher Nolan)\n> "
    )
    elementos_clave = input(
        "3. ¬øQu√© es lo que m√°s valoras en una pel√≠cula? (ej: historia, giros, acci√≥n, humor, personajes)\n> "
    )
    estado_animo = input(
        "4. ¬øQu√© tipo de pel√≠cula te apetece ver en este momento? (ej: algo para pensar, algo relajante)\n> "
    )

    # 2. Construcci√≥n del prompt con los datos del usuario
    prompt_completo = f"""
    Eres un experto en cine y un curador de pel√≠culas personalizadas. Tu tarea es recomendar 3 pel√≠culas en formato JSON bas√°ndote en los gustos detallados que te proporciono.

    **Respuestas del usuario:**
    1. G√©neros: {generos}
    2. Pel√≠culas Favoritas: {peliculas_favoritas}
    3. Elementos Clave: {elementos_clave}
    4. Estado de √Ånimo: {estado_animo}

    **Instrucci√≥n Final:**
    Basado en las respuestas del usuario, genera una respuesta en **formato JSON**, que contenga un array de 3 objetos, cada uno representando una pel√≠cula. Cada objeto debe tener los siguientes campos: `titulo` (string), `genero` (string) y `motivo_recomendacion` (string). El `motivo_recomendacion` debe explicar de forma convincente por qu√© la pel√≠cula es una buena opci√≥n para el usuario, conect√°ndola directamente con sus respuestas anteriores. No incluyas nada m√°s en la respuesta, solo el JSON.
    """

    # 3. Llamada al modelo de lenguaje
    print("\nüßê Analizando tus gustos...")
    try:
        json_recomendaciones = llm_call(prompt_completo)
        recomendaciones = json.loads(json_recomendaciones)

        # 4. Presentaci√≥n de resultados
        print("\nüéâ ¬°Aqu√≠ est√°n tus recomendaciones personalizadas! üéâ")
        print("-" * 50)
        for peli in recomendaciones:
            print(f"üé¨ **T√≠tulo:** {peli['titulo']}")
            print(f"   **G√©nero:** {peli['genero']}")
            print(f"   **Motivo:** {peli['motivo_recomendacion']}")
            print("-" * 50)

    except json.JSONDecodeError:
        print(
            "‚ùå Lo siento, no pude procesar la respuesta del modelo. Por favor, intenta de nuevo."
        )
    except Exception as e:
        print(f"‚ùå Ocurri√≥ un error inesperado: {e}")


# Ejecutar el script
if __name__ == "__main__":
    recomendar_peliculas_personalizadas()
